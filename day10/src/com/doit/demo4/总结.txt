static 
     静态修饰符 能够修饰 成员变量 成员方法 
	 特点 
		被static修饰的成员 属于类 不单属于对象 被所有对象共享
	static成员的访问 
		类名.成员变量;
		类名.成员方法();
	注意事项
		static修饰的成员随着类的加载而加载 优先于对象存在
		静态只能直接访问静态 不能使用this/super
	
代码块 
	局部代码块
		主要是为了限制变量的作用域范围 极少使用
	成员代码块
		也叫做构造代码块 创建对象时被调用 优先于构造方法
	静态代码块
		类加载的时候被调用 类只加载一次 静态代码块只执行一次
		   类什么时候加载  
			    1.第一次创建对象
				2.第一次访问静态变量
				3.第一次访问静态方法
				4.第一次创建子类对象
			
	静态>成员>构造方法
静态常量 
	public static final double PI = 3.14;

修饰符 
		4种访问权限 具体的 看图
		
	public 公共的访问权限 任何地方都可以访问  可以修饰 类 方法 成员变量
    protected 受保护的权限 当前包和其他包的子类可以访问  可以修饰 方法 成员变量
    deafualt 默认的权限 包权限 当前包可以访问   可以修饰 类 方法 成员变量
    private 私有的访问权限 只能在本类中使用   可以修饰 类 方法 成员变量


    final 最终修饰符  可以修饰 类  方法 成员变量和局部变量   被final修饰的类不能被继承 修饰的方法不能被重写 修饰的变量是常量
    static 静态修饰符  可以修饰类的成员 成员变量 成员方法  被static修饰的成员属于类 不单属于某个对象 被所有对象所共享
    abstract 抽象的   可以修饰类  方法

    private和abstract能否一起使用?  不能一起使用 如果被private修饰的方法 子类是无法看到的 没有办法重写 abstract又要求子类必须重写

    final和abstract能否一起使用? 不能一起使用 final修饰的类不让子类继承 abstract必须让子类继承
                                          final修饰的方法不让子类重写 abstract必须让子类重写 冲突

    static和final是否能一起使用? 可以

    static和abstract能否一起使用? 不可以 因为假设可以一起使用的话 就会出现类名直接调用一个抽象方法 而抽象方法没有方法体
                                直接调用没有任何意义
内部类 
	成员内部类
		public class Outer{
			private String name;
			public class Inner{
				
				public void method(){
					System.out.println(name);
				}
			}
		}
		Outer.Inner in = new Outer().new Inner();
		
    局部内部类 
		主要是匿名内部类 
		
		两件事
			1.定义了一个类的子类
			2.同时创建了这个子类对象
		
		作用:创建一个类子类对象的快捷方式
		格式 
			 new 父类/接口(){
				重写方法
			 };
								
								
								
								
								
								
								
								
								
								
								
								
								
								
								
								
								
								
								
								
								
								
								
								
								
								
	